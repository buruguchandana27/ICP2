# -*- coding: utf-8 -*-
"""700758763_ICP2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18K0ljypeqy5tSKh-98To94SlrZ-H2VI1
"""

# Define a function to concatenate first_name and last_name into a full name
def fullname(first_name, last_name):
    full_name = first_name + " " + last_name
    return full_name

# Define a function to return every other character in a given string
def string_alternative(full_name):
    alternate_chars = ""
    for i in range(0, len(full_name), 2):
        alternate_chars += full_name[i]
    return alternate_chars

# Main function to collect user input, process it, and display results
def main():
    # Prompt the user to enter their first name
    first_name = input("Enter your first name: ")

    # Prompt the user to enter their last name
    last_name = input("Enter your last name: ")

    # Call the fullname function to concatenate the first and last names
    full_name = fullname(first_name, last_name)

    # Display the full name
    print("Full Name:", full_name)

    # Call the string_alternative function to get alternate characters in the full name
    alternate_chars = string_alternative(full_name)

    # Display the alternate characters in the full name
    print("Alternate Characters in Full Name:", alternate_chars)

# Check if the script is run as the main program
if __name__ == "__main__":
    main()

import re

# Function to count words in a line
def count_words(line, word_counts):
    # Use regular expression to split the line into words and exclude punctuation
    words = re.findall(r'\b\w+\b', line.lower())
    for word in words:
        word_counts[word] = word_counts.get(word, 0) + 1

# Read input from input.txt file
with open("/content/input.txt", "r") as input_file:
    lines = input_file.readlines()

# Initialize a dictionary to store word counts
word_counts = {}

# Count words in the entire file
for line in lines:
    count_words(line.strip(), word_counts)

# Print the original lines
print("Input:")
for line in lines:
    print(line.strip())

# Print the word counts, displaying each word only once
print("Word_Count:")
displayed_words = set()
for line in lines:
    words = re.findall(r'\b\w+\b', line.lower())
    for word in words:
        if word not in displayed_words:
            print(f"{word}: {word_counts[word]}")
            displayed_words.add(word)

# Write the output to output.txt file
with open("output.txt", "w") as output_file:
    output_file.write("Input:\n")
    for line in lines:
        output_file.write(line.strip() + "\n")
    output_file.write("Word_Count:\n")
    for word in displayed_words:
        output_file.write(f"{word}: {word_counts[word]}\n")

print("Output saved to output.txt")

"""# New Section"""

import ast

def centimeters_to_inches(centimeters):
    return centimeters / 2.54

# Function to read a list of heights from user input
def get_heights():
    input_string = input("Enter a list of heights in centimeters: ")
    try:
        # Safely evaluate the input string to a list
        heights = ast.literal_eval(input_string)
        if isinstance(heights, list) and all(isinstance(height, int) for height in heights):
            return heights
        else:
            raise ValueError
    except (ValueError, SyntaxError):
        print("Invalid input. Please enter a valid list of integers.")
        return []

# Read heights from user
heights_cm = get_heights()

# Convert to inches using a nested loop
heights_in_inches_loop = []
for height in heights_cm:
    inches = centimeters_to_inches(height)
    heights_in_inches_loop.append(round(inches, 2))

# Convert to inches using list comprehension
heights_in_inches_comprehension = [round(centimeters_to_inches(height), 2) for height in heights_cm]

# Output
print("Heights in Inches (Nested Loop):", heights_in_inches_loop)
print("Heights in Inches (List Comprehension):", heights_in_inches_comprehension)